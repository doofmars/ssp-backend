openapi: 3.0.0
info:
  description: |-
    This is a the backend for the SSP Online Game. It is a RESTful API that is used by the frontend to play the game.

    Some useful links:
    - [ssp-online](https://github.com/doofmars/ssp-online) - The source code for the SSP Online Game
    - [ssp-backend](https://github.com/doofmars/ssp-backend) - The source code for the SSP Backend
  license:
    name: MIT
    url: https://github.com/doofmars/ssp-backend/blob/master/LICENSE.md
  title: SSP-Online Backend
  version: 1.0.0
servers:
- url: http://localhost:8080/api
tags:
- description: Lobby related code for finding and joining a game
  name: lobby
- description: Game related endpoint
  name: game
paths:
  /game:
    put:
      description: Create a new game
      operationId: game_put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGame'
        required: true
        x-body-name: create_game
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Game not found
        "405":
          description: Invalid input
      tags:
      - lobby
      x-openapi-router-controller: openapi_server.controllers.lobby_controller
  /game/{game_id}:
    delete:
      description: Delete a game
      operationId: game_game_id_delete
      parameters:
      - description: ID of game to delete
        explode: false
        in: path
        name: game_id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Game not found
      tags:
      - lobby
      x-openapi-router-controller: openapi_server.controllers.lobby_controller
    get:
      description: Get information about a game
      operationId: game_game_id_get
      parameters:
      - description: ID of game to return
        explode: false
        in: path
        name: game_id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Game not found
      tags:
      - lobby
      x-openapi-router-controller: openapi_server.controllers.lobby_controller
  /game/{game_id}/turn:
    post:
      description: Do a turn
      operationId: game_game_id_turn_post
      parameters:
      - description: ID of game to return
        explode: false
        in: path
        name: game_id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_game__gameId__turn_post_request'
        required: true
        x-body-name: turn
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Game not found
        "405":
          description: Invalid input
      tags:
      - game
      x-openapi-router-controller: openapi_server.controllers.game_controller
  /games:
    get:
      description: Get all games
      operationId: games_get
      parameters:
      - description: Status of the game
        explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/GameStatus'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Game'
                type: array
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Game not found
        "405":
          description: Invalid input
      tags:
      - lobby
      x-openapi-router-controller: openapi_server.controllers.lobby_controller
components:
  schemas:
    Id:
      pattern: "^[0-9a-fA-F]{24}$"
      title: id
      type: string
    GameStatus:
      enum:
      - WAITING_FOR_GUEST
      - SETUP_PLACE_FLAG
      - SETUP_PLACE_TRAP
      - SETUP_SHUFFLE_PAWNS
      - RUNNING_PLAYER_TURN
      - RUNNING_OPPONENT_TURN
      - RUNNING_FIGHT
      - RUNNING_SAME_WEAPON
      - FINISHED_HOST_WIN
      - FINISHED_GUEST_WIN
      - FINISHED_DRAW
      title: GameStatus
      type: string
    CreateGame:
      example:
        host:
          name: name
          id: 0
          key: key
      properties:
        host:
          $ref: '#/components/schemas/Player'
      required:
      - host
      title: CreateGame
      type: object
    Game:
      example:
        currentRound: 5
        winner: NONE
        last_update: 2000-01-23T04:56:07.000+00:00
        host:
          name: name
          id: 0
          key: key
        guest:
          name: name
          id: 0
          key: key
        id: id
        board:
          grid:
          - - owner: HOST
              item: ROCK
            - owner: HOST
              item: ROCK
          - - owner: HOST
              item: ROCK
            - owner: HOST
              item: ROCK
          width: 6
          height: 1
        status: null
      properties:
        id:
          default: "0"
          format: int64
          title: id
          type: string
        host:
          $ref: '#/components/schemas/Player'
        guest:
          $ref: '#/components/schemas/Player'
        board:
          $ref: '#/components/schemas/Board'
        status:
          $ref: '#/components/schemas/GameStatus'
        currentRound:
          format: int64
          title: currentRound
          type: integer
        last_update:
          format: date-time
          title: last_update
          type: string
        winner:
          default: NONE
          enum:
          - NONE
          - HOST
          - GUEST
          - DRAW
          title: winner
          type: string
      required:
      - currentRound
      - host
      - id
      - rounds
      - status
      - winner
      title: Game
      type: object
    Player:
      example:
        name: name
        id: 0
        key: key
      properties:
        id:
          format: int64
          title: id
          type: integer
        name:
          title: name
          type: string
        key:
          description: Identify the player against the server
          title: key
          type: string
      required:
      - name
      title: Player
      type: object
    Board:
      example:
        grid:
        - - owner: HOST
            item: ROCK
          - owner: HOST
            item: ROCK
        - - owner: HOST
            item: ROCK
          - owner: HOST
            item: ROCK
        width: 6
        height: 1
      properties:
        width:
          format: int64
          title: width
          type: integer
        height:
          format: int64
          title: height
          type: integer
        grid:
          items:
            items:
              $ref: '#/components/schemas/Pawn'
            type: array
          title: grid
          type: array
      required:
      - grid
      - height
      - width
      title: Board
      type: object
    Pawn:
      example:
        owner: HOST
        item: ROCK
      properties:
        item:
          enum:
          - ROCK
          - PAPER
          - SCISSORS
          - TRAP
          - FLAG
          - EMPTY
          title: item
          type: string
        owner:
          enum:
          - HOST
          - GUEST
          title: owner
          type: string
      required:
      - item
      - owner
      title: Pawn
      type: object
    _game__gameId__turn_post_request:
      properties:
        player:
          $ref: '#/components/schemas/Player'
        pawn:
          $ref: '#/components/schemas/Pawn'
        pos-x:
          format: int64
          title: x
          type: integer
        pos-y:
          format: int64
          title: pos-y
          type: integer
        action:
          enum:
          - MOVE_X-1
          - MOVE_X+1
          - MOVE_Y-1
          - MOVE_Y+1
          - PLACE_TRAP
          - PLACE_FLAG
          - SHUFFLE_PAWNS
          title: action
          type: string
      required:
      - pawn
      - player
      - pos-x
      - pos-y
      title: _game__gameId__turn_post_request
      type: object
