/* tslint:disable */
/* eslint-disable */
/**
 * SSP-Online Backend
 * This is a the backend for the SSP Online Game. It is a RESTful API that is used by the frontend to play the game.  Some useful links: - [ssp-online](https://github.com/doofmars/ssp-online) - The source code for the SSP Online Game - [ssp-backend](https://github.com/doofmars/ssp-backend) - The source code for the SSP Backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Board
 */
export interface Board {
    /**
     * 
     * @type {number}
     * @memberof Board
     */
    'width': number;
    /**
     * 
     * @type {number}
     * @memberof Board
     */
    'height': number;
    /**
     * 
     * @type {Array<Array<Pawn>>}
     * @memberof Board
     */
    'grid': Array<Array<Pawn>>;
}
/**
 * 
 * @export
 * @interface CreateGame
 */
export interface CreateGame {
    /**
     * 
     * @type {Player}
     * @memberof CreateGame
     */
    'host': Player;
}
/**
 * 
 * @export
 * @interface Game
 */
export interface Game {
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    'id': string;
    /**
     * 
     * @type {Player}
     * @memberof Game
     */
    'host': Player;
    /**
     * 
     * @type {Player}
     * @memberof Game
     */
    'guest'?: Player;
    /**
     * 
     * @type {Board}
     * @memberof Game
     */
    'board'?: Board;
    /**
     * 
     * @type {GameStatus}
     * @memberof Game
     */
    'status': GameStatus;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    'currentRound': number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    'last_update'?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    'winner': GameWinnerEnum;
}

export const GameWinnerEnum = {
    None: 'NONE',
    Host: 'HOST',
    Guest: 'GUEST',
    Draw: 'DRAW'
} as const;

export type GameWinnerEnum = typeof GameWinnerEnum[keyof typeof GameWinnerEnum];

/**
 * 
 * @export
 * @interface GameGameIdTurnPostRequest
 */
export interface GameGameIdTurnPostRequest {
    /**
     * 
     * @type {Player}
     * @memberof GameGameIdTurnPostRequest
     */
    'player': Player;
    /**
     * 
     * @type {Pawn}
     * @memberof GameGameIdTurnPostRequest
     */
    'pawn': Pawn;
    /**
     * 
     * @type {number}
     * @memberof GameGameIdTurnPostRequest
     */
    'pos-x': number;
    /**
     * 
     * @type {number}
     * @memberof GameGameIdTurnPostRequest
     */
    'pos-y': number;
    /**
     * 
     * @type {string}
     * @memberof GameGameIdTurnPostRequest
     */
    'action'?: GameGameIdTurnPostRequestActionEnum;
}

export const GameGameIdTurnPostRequestActionEnum = {
    MoveX1: 'MOVE_X-1',
    MoveX12: 'MOVE_X+1',
    MoveY1: 'MOVE_Y-1',
    MoveY12: 'MOVE_Y+1',
    PlaceTrap: 'PLACE_TRAP',
    PlaceFlag: 'PLACE_FLAG',
    ShufflePawns: 'SHUFFLE_PAWNS'
} as const;

export type GameGameIdTurnPostRequestActionEnum = typeof GameGameIdTurnPostRequestActionEnum[keyof typeof GameGameIdTurnPostRequestActionEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const GameStatus = {
    WaitingForGuest: 'WAITING_FOR_GUEST',
    SetupPlaceFlag: 'SETUP_PLACE_FLAG',
    SetupPlaceTrap: 'SETUP_PLACE_TRAP',
    SetupShufflePawns: 'SETUP_SHUFFLE_PAWNS',
    RunningPlayerTurn: 'RUNNING_PLAYER_TURN',
    RunningOpponentTurn: 'RUNNING_OPPONENT_TURN',
    RunningFight: 'RUNNING_FIGHT',
    RunningSameWeapon: 'RUNNING_SAME_WEAPON',
    FinishedHostWin: 'FINISHED_HOST_WIN',
    FinishedGuestWin: 'FINISHED_GUEST_WIN',
    FinishedDraw: 'FINISHED_DRAW'
} as const;

export type GameStatus = typeof GameStatus[keyof typeof GameStatus];


/**
 * 
 * @export
 * @interface Pawn
 */
export interface Pawn {
    /**
     * 
     * @type {string}
     * @memberof Pawn
     */
    'item': PawnItemEnum;
    /**
     * 
     * @type {string}
     * @memberof Pawn
     */
    'owner': PawnOwnerEnum;
}

export const PawnItemEnum = {
    Rock: 'ROCK',
    Paper: 'PAPER',
    Scissors: 'SCISSORS',
    Trap: 'TRAP',
    Flag: 'FLAG',
    Empty: 'EMPTY'
} as const;

export type PawnItemEnum = typeof PawnItemEnum[keyof typeof PawnItemEnum];
export const PawnOwnerEnum = {
    Host: 'HOST',
    Guest: 'GUEST'
} as const;

export type PawnOwnerEnum = typeof PawnOwnerEnum[keyof typeof PawnOwnerEnum];

/**
 * 
 * @export
 * @interface Player
 */
export interface Player {
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'name': string;
    /**
     * Identify the player against the server
     * @type {string}
     * @memberof Player
     */
    'key'?: string;
}

/**
 * GameApi - axios parameter creator
 * @export
 */
export const GameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Do a turn
         * @param {string} gameId ID of game to return
         * @param {GameGameIdTurnPostRequest} gameGameIdTurnPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGameIdTurnPost: async (gameId: string, gameGameIdTurnPostRequest: GameGameIdTurnPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('gameGameIdTurnPost', 'gameId', gameId)
            // verify required parameter 'gameGameIdTurnPostRequest' is not null or undefined
            assertParamExists('gameGameIdTurnPost', 'gameGameIdTurnPostRequest', gameGameIdTurnPostRequest)
            const localVarPath = `/game/{game_id}/turn`
                .replace(`{${"game_id"}}`, encodeURIComponent(String(gameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gameGameIdTurnPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameApi - functional programming interface
 * @export
 */
export const GameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameApiAxiosParamCreator(configuration)
    return {
        /**
         * Do a turn
         * @param {string} gameId ID of game to return
         * @param {GameGameIdTurnPostRequest} gameGameIdTurnPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gameGameIdTurnPost(gameId: string, gameGameIdTurnPostRequest: GameGameIdTurnPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Game>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gameGameIdTurnPost(gameId, gameGameIdTurnPostRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GameApi.gameGameIdTurnPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * GameApi - factory interface
 * @export
 */
export const GameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameApiFp(configuration)
    return {
        /**
         * Do a turn
         * @param {string} gameId ID of game to return
         * @param {GameGameIdTurnPostRequest} gameGameIdTurnPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGameIdTurnPost(gameId: string, gameGameIdTurnPostRequest: GameGameIdTurnPostRequest, options?: any): AxiosPromise<Game> {
            return localVarFp.gameGameIdTurnPost(gameId, gameGameIdTurnPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameApi - object-oriented interface
 * @export
 * @class GameApi
 * @extends {BaseAPI}
 */
export class GameApi extends BaseAPI {
    /**
     * Do a turn
     * @param {string} gameId ID of game to return
     * @param {GameGameIdTurnPostRequest} gameGameIdTurnPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public gameGameIdTurnPost(gameId: string, gameGameIdTurnPostRequest: GameGameIdTurnPostRequest, options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).gameGameIdTurnPost(gameId, gameGameIdTurnPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LobbyApi - axios parameter creator
 * @export
 */
export const LobbyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a game
         * @param {string} gameId ID of game to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGameIdDelete: async (gameId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('gameGameIdDelete', 'gameId', gameId)
            const localVarPath = `/game/{game_id}`
                .replace(`{${"game_id"}}`, encodeURIComponent(String(gameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a game
         * @param {string} gameId ID of game to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGameIdGet: async (gameId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('gameGameIdGet', 'gameId', gameId)
            const localVarPath = `/game/{game_id}`
                .replace(`{${"game_id"}}`, encodeURIComponent(String(gameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new game
         * @param {CreateGame} createGame 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamePut: async (createGame: CreateGame, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createGame' is not null or undefined
            assertParamExists('gamePut', 'createGame', createGame)
            const localVarPath = `/game`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGame, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all games
         * @param {GameStatus} [status] Status of the game
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesGet: async (status?: GameStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/games`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LobbyApi - functional programming interface
 * @export
 */
export const LobbyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LobbyApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a game
         * @param {string} gameId ID of game to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gameGameIdDelete(gameId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gameGameIdDelete(gameId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyApi.gameGameIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get information about a game
         * @param {string} gameId ID of game to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gameGameIdGet(gameId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Game>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gameGameIdGet(gameId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyApi.gameGameIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Create a new game
         * @param {CreateGame} createGame 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamePut(createGame: CreateGame, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Game>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamePut(createGame, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyApi.gamePut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get all games
         * @param {GameStatus} [status] Status of the game
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesGet(status?: GameStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Game>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesGet(status, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyApi.gamesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * LobbyApi - factory interface
 * @export
 */
export const LobbyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LobbyApiFp(configuration)
    return {
        /**
         * Delete a game
         * @param {string} gameId ID of game to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGameIdDelete(gameId: string, options?: any): AxiosPromise<void> {
            return localVarFp.gameGameIdDelete(gameId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a game
         * @param {string} gameId ID of game to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGameIdGet(gameId: string, options?: any): AxiosPromise<Game> {
            return localVarFp.gameGameIdGet(gameId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new game
         * @param {CreateGame} createGame 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamePut(createGame: CreateGame, options?: any): AxiosPromise<Game> {
            return localVarFp.gamePut(createGame, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all games
         * @param {GameStatus} [status] Status of the game
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesGet(status?: GameStatus, options?: any): AxiosPromise<Array<Game>> {
            return localVarFp.gamesGet(status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LobbyApi - object-oriented interface
 * @export
 * @class LobbyApi
 * @extends {BaseAPI}
 */
export class LobbyApi extends BaseAPI {
    /**
     * Delete a game
     * @param {string} gameId ID of game to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    public gameGameIdDelete(gameId: string, options?: RawAxiosRequestConfig) {
        return LobbyApiFp(this.configuration).gameGameIdDelete(gameId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a game
     * @param {string} gameId ID of game to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    public gameGameIdGet(gameId: string, options?: RawAxiosRequestConfig) {
        return LobbyApiFp(this.configuration).gameGameIdGet(gameId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new game
     * @param {CreateGame} createGame 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    public gamePut(createGame: CreateGame, options?: RawAxiosRequestConfig) {
        return LobbyApiFp(this.configuration).gamePut(createGame, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all games
     * @param {GameStatus} [status] Status of the game
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    public gamesGet(status?: GameStatus, options?: RawAxiosRequestConfig) {
        return LobbyApiFp(this.configuration).gamesGet(status, options).then((request) => request(this.axios, this.basePath));
    }
}



