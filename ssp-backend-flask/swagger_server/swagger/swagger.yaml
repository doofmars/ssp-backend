openapi: 3.0.0
info:
  title: SSP-Online Backend
  description: |-
    This is a the backend for the SSP Online Game. It is a RESTful API that is used by the frontend to play the game.

    Some useful links:
    - [ssp-online](https://github.com/doofmars/ssp-online) - The source code for the SSP Online Game
    - [ssp-backend](https://github.com/doofmars/ssp-backend) - The source code for the SSP Backend
  license:
    name: MIT
    url: https://github.com/doofmars/ssp-backend/blob/master/LICENSE.md
  version: 1.0.0
servers:
- url: http://localhost:8080
tags:
- name: lobby
  description: Lobby related code for finding and joining a game
- name: game
  description: Game related endpoint
paths:
  /game:
    put:
      tags:
      - lobby
      description: Create a new game
      operationId: game_put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGame'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
            application/xml:
              schema:
                $ref: '#/components/schemas/Game'
        "400":
          description: Invalid ID supplied
        "404":
          description: Game not found
        "405":
          description: Invalid input
      x-openapi-router-controller: swagger_server.controllers.lobby_controller
  /game/{gameId}:
    get:
      tags:
      - lobby
      description: Get information about a game
      operationId: game_game_id_get
      parameters:
      - name: gameId
        in: path
        description: ID of game to return
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        "400":
          description: Invalid ID supplied
        "404":
          description: Game not found
      x-openapi-router-controller: swagger_server.controllers.lobby_controller
  /game/{gameId}/turn:
    post:
      tags:
      - game
      description: Do a turn
      operationId: game_game_id_turn_post
      parameters:
      - name: gameId
        in: path
        description: ID of game to return
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gameId_turn_body'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        "400":
          description: Invalid ID supplied
        "404":
          description: Game not found
        "405":
          description: Invalid input
      x-openapi-router-controller: swagger_server.controllers.game_controller
  /games:
    get:
      tags:
      - lobby
      description: Get all games
      operationId: games_get
      parameters:
      - name: status
        in: query
        description: Status of the game
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/GameStatus'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
                x-content-type: application/json
        "400":
          description: Invalid ID supplied
        "404":
          description: Game not found
        "405":
          description: Invalid input
      x-openapi-router-controller: swagger_server.controllers.lobby_controller
components:
  schemas:
    Id:
      type: string
      format: int64
    GameStatus:
      type: string
      enum:
      - WAITING_FOR_GUEST
      - SETUP_PLACE_FLAG
      - SETUP_PLACE_TRAP
      - SETUP_SHUFFLE_PAWNS
      - RUNNING_PLAYER_TURN
      - RUNNING_OPPONENT_TURN
      - RUNNING_FIGHT
      - RUNNING_SAME_WEAPON
      - FINISHED_HOST_WIN
      - FINISHED_GUEST_WIN
      - FINISHED_DRAW
    CreateGame:
      required:
      - host
      type: object
      properties:
        host:
          $ref: '#/components/schemas/Player'
    Game:
      required:
      - currentRound
      - guest
      - host
      - id
      - rounds
      - winner
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        host:
          $ref: '#/components/schemas/Player'
        guest:
          $ref: '#/components/schemas/Player'
        board:
          $ref: '#/components/schemas/Board'
        status:
          $ref: '#/components/schemas/GameStatus'
        currentRound:
          type: integer
          format: int64
        last_update:
          type: string
          format: date-time
        winner:
          type: string
          enum:
          - NONE
          - HOST
          - GUEST
          - DRAW
      example:
        currentRound: 5
        winner: NONE
        last_update: 2000-01-23T04:56:07.000+00:00
        host:
          name: name
          id: 0
          key: key
        guest: null
        id: id
        board:
          grid:
          - - items: ROCK
              player: HOST
            - items: ROCK
              player: HOST
          - - items: ROCK
              player: HOST
            - items: ROCK
              player: HOST
          width: 6
          height: 1
        status: WAITING_FOR_GUEST
    Player:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        key:
          type: string
          description: Identify the player against the server
      example:
        name: name
        id: 0
        key: key
    Board:
      required:
      - grid
      - height
      - width
      type: object
      properties:
        width:
          type: integer
          format: int64
        height:
          type: integer
          format: int64
        grid:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/Pawn'
      example:
        grid:
        - - items: ROCK
            player: HOST
          - items: ROCK
            player: HOST
        - - items: ROCK
            player: HOST
          - items: ROCK
            player: HOST
        width: 6
        height: 1
    Pawn:
      required:
      - player
      - type
      type: object
      properties:
        items:
          type: string
          enum:
          - ROCK
          - PAPER
          - SCISSORS
          - TRAP
          - FLAG
          - EMPTY
          - null
        player:
          type: string
          enum:
          - HOST
          - GUEST
      example:
        items: ROCK
        player: HOST
    gameId_turn_body:
      required:
      - pawn
      - player
      - x
      - "y"
      type: object
      properties:
        player:
          $ref: '#/components/schemas/Player'
        pawn:
          $ref: '#/components/schemas/Pawn'
        x:
          type: integer
          format: int64
        "y":
          type: integer
          format: int64
        action:
          type: string
          enum:
          - MOVE_X-1
          - MOVE_X+1
          - MOVE_Y-1
          - MOVE_Y+1
          - PLACE_TRAP
          - PLACE_FLAG
          - SHUFFLE_PAWNS

