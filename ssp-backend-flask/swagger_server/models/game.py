# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.board import Board  # noqa: F401,E501
from swagger_server.models.game_status import GameStatus  # noqa: F401,E501
from swagger_server.models.id import Id  # noqa: F401,E501
from swagger_server.models.player import Player  # noqa: F401,E501
from swagger_server import util


class Game(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: Id=None, host: Player=None, guest: Player=None, board: Board=None, status: GameStatus=None, current_round: int=None, last_update: datetime=None, winner: str=None):  # noqa: E501
        """Game - a model defined in Swagger

        :param id: The id of this Game.  # noqa: E501
        :type id: Id
        :param host: The host of this Game.  # noqa: E501
        :type host: Player
        :param guest: The guest of this Game.  # noqa: E501
        :type guest: Player
        :param board: The board of this Game.  # noqa: E501
        :type board: Board
        :param status: The status of this Game.  # noqa: E501
        :type status: GameStatus
        :param current_round: The current_round of this Game.  # noqa: E501
        :type current_round: int
        :param last_update: The last_update of this Game.  # noqa: E501
        :type last_update: datetime
        :param winner: The winner of this Game.  # noqa: E501
        :type winner: str
        """
        self.swagger_types = {
            'id': Id,
            'host': Player,
            'guest': Player,
            'board': Board,
            'status': GameStatus,
            'current_round': int,
            'last_update': datetime,
            'winner': str
        }

        self.attribute_map = {
            'id': 'id',
            'host': 'host',
            'guest': 'guest',
            'board': 'board',
            'status': 'status',
            'current_round': 'currentRound',
            'last_update': 'last_update',
            'winner': 'winner'
        }
        self._id = id
        self._host = host
        self._guest = guest
        self._board = board
        self._status = status
        self._current_round = current_round
        self._last_update = last_update
        self._winner = winner

    @classmethod
    def from_dict(cls, dikt) -> 'Game':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Game of this Game.  # noqa: E501
        :rtype: Game
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> Id:
        """Gets the id of this Game.


        :return: The id of this Game.
        :rtype: Id
        """
        return self._id

    @id.setter
    def id(self, id: Id):
        """Sets the id of this Game.


        :param id: The id of this Game.
        :type id: Id
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def host(self) -> Player:
        """Gets the host of this Game.


        :return: The host of this Game.
        :rtype: Player
        """
        return self._host

    @host.setter
    def host(self, host: Player):
        """Sets the host of this Game.


        :param host: The host of this Game.
        :type host: Player
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def guest(self) -> Player:
        """Gets the guest of this Game.


        :return: The guest of this Game.
        :rtype: Player
        """
        return self._guest

    @guest.setter
    def guest(self, guest: Player):
        """Sets the guest of this Game.


        :param guest: The guest of this Game.
        :type guest: Player
        """
        if guest is None:
            raise ValueError("Invalid value for `guest`, must not be `None`")  # noqa: E501

        self._guest = guest

    @property
    def board(self) -> Board:
        """Gets the board of this Game.


        :return: The board of this Game.
        :rtype: Board
        """
        return self._board

    @board.setter
    def board(self, board: Board):
        """Sets the board of this Game.


        :param board: The board of this Game.
        :type board: Board
        """

        self._board = board

    @property
    def status(self) -> GameStatus:
        """Gets the status of this Game.


        :return: The status of this Game.
        :rtype: GameStatus
        """
        return self._status

    @status.setter
    def status(self, status: GameStatus):
        """Sets the status of this Game.


        :param status: The status of this Game.
        :type status: GameStatus
        """

        self._status = status

    @property
    def current_round(self) -> int:
        """Gets the current_round of this Game.


        :return: The current_round of this Game.
        :rtype: int
        """
        return self._current_round

    @current_round.setter
    def current_round(self, current_round: int):
        """Sets the current_round of this Game.


        :param current_round: The current_round of this Game.
        :type current_round: int
        """
        if current_round is None:
            raise ValueError("Invalid value for `current_round`, must not be `None`")  # noqa: E501

        self._current_round = current_round

    @property
    def last_update(self) -> datetime:
        """Gets the last_update of this Game.


        :return: The last_update of this Game.
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update: datetime):
        """Sets the last_update of this Game.


        :param last_update: The last_update of this Game.
        :type last_update: datetime
        """

        self._last_update = last_update

    @property
    def winner(self) -> str:
        """Gets the winner of this Game.


        :return: The winner of this Game.
        :rtype: str
        """
        return self._winner

    @winner.setter
    def winner(self, winner: str):
        """Sets the winner of this Game.


        :param winner: The winner of this Game.
        :type winner: str
        """
        allowed_values = ["NONE", "HOST", "GUEST", "DRAW"]  # noqa: E501
        if winner not in allowed_values:
            raise ValueError(
                "Invalid value for `winner` ({0}), must be one of {1}"
                .format(winner, allowed_values)
            )

        self._winner = winner
