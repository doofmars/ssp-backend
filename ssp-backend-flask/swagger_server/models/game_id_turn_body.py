# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.pawn import Pawn  # noqa: F401,E501
from swagger_server.models.player import Player  # noqa: F401,E501
from swagger_server import util


class GameIdTurnBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, player: Player=None, pawn: Pawn=None, x: int=None, y: int=None, action: str=None):  # noqa: E501
        """GameIdTurnBody - a model defined in Swagger

        :param player: The player of this GameIdTurnBody.  # noqa: E501
        :type player: Player
        :param pawn: The pawn of this GameIdTurnBody.  # noqa: E501
        :type pawn: Pawn
        :param x: The x of this GameIdTurnBody.  # noqa: E501
        :type x: int
        :param y: The y of this GameIdTurnBody.  # noqa: E501
        :type y: int
        :param action: The action of this GameIdTurnBody.  # noqa: E501
        :type action: str
        """
        self.swagger_types = {
            'player': Player,
            'pawn': Pawn,
            'x': int,
            'y': int,
            'action': str
        }

        self.attribute_map = {
            'player': 'player',
            'pawn': 'pawn',
            'x': 'x',
            'y': 'y',
            'action': 'action'
        }
        self._player = player
        self._pawn = pawn
        self._x = x
        self._y = y
        self._action = action

    @classmethod
    def from_dict(cls, dikt) -> 'GameIdTurnBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The gameId_turn_body of this GameIdTurnBody.  # noqa: E501
        :rtype: GameIdTurnBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def player(self) -> Player:
        """Gets the player of this GameIdTurnBody.


        :return: The player of this GameIdTurnBody.
        :rtype: Player
        """
        return self._player

    @player.setter
    def player(self, player: Player):
        """Sets the player of this GameIdTurnBody.


        :param player: The player of this GameIdTurnBody.
        :type player: Player
        """
        if player is None:
            raise ValueError("Invalid value for `player`, must not be `None`")  # noqa: E501

        self._player = player

    @property
    def pawn(self) -> Pawn:
        """Gets the pawn of this GameIdTurnBody.


        :return: The pawn of this GameIdTurnBody.
        :rtype: Pawn
        """
        return self._pawn

    @pawn.setter
    def pawn(self, pawn: Pawn):
        """Sets the pawn of this GameIdTurnBody.


        :param pawn: The pawn of this GameIdTurnBody.
        :type pawn: Pawn
        """
        if pawn is None:
            raise ValueError("Invalid value for `pawn`, must not be `None`")  # noqa: E501

        self._pawn = pawn

    @property
    def x(self) -> int:
        """Gets the x of this GameIdTurnBody.


        :return: The x of this GameIdTurnBody.
        :rtype: int
        """
        return self._x

    @x.setter
    def x(self, x: int):
        """Sets the x of this GameIdTurnBody.


        :param x: The x of this GameIdTurnBody.
        :type x: int
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")  # noqa: E501

        self._x = x

    @property
    def y(self) -> int:
        """Gets the y of this GameIdTurnBody.


        :return: The y of this GameIdTurnBody.
        :rtype: int
        """
        return self._y

    @y.setter
    def y(self, y: int):
        """Sets the y of this GameIdTurnBody.


        :param y: The y of this GameIdTurnBody.
        :type y: int
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")  # noqa: E501

        self._y = y

    @property
    def action(self) -> str:
        """Gets the action of this GameIdTurnBody.


        :return: The action of this GameIdTurnBody.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action: str):
        """Sets the action of this GameIdTurnBody.


        :param action: The action of this GameIdTurnBody.
        :type action: str
        """
        allowed_values = ["MOVE_X-1", "MOVE_X+1", "MOVE_Y-1", "MOVE_Y+1", "PLACE_TRAP", "PLACE_FLAG", "SHUFFLE_PAWNS"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action
