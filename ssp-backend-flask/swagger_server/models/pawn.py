# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Pawn(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, items: str=None, player: str=None):  # noqa: E501
        """Pawn - a model defined in Swagger

        :param items: The items of this Pawn.  # noqa: E501
        :type items: str
        :param player: The player of this Pawn.  # noqa: E501
        :type player: str
        """
        self.swagger_types = {
            'items': str,
            'player': str
        }

        self.attribute_map = {
            'items': 'items',
            'player': 'player'
        }
        self._items = items
        self._player = player

    @classmethod
    def from_dict(cls, dikt) -> 'Pawn':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Pawn of this Pawn.  # noqa: E501
        :rtype: Pawn
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self) -> str:
        """Gets the items of this Pawn.


        :return: The items of this Pawn.
        :rtype: str
        """
        return self._items

    @items.setter
    def items(self, items: str):
        """Sets the items of this Pawn.


        :param items: The items of this Pawn.
        :type items: str
        """
        allowed_values = ["ROCK", "PAPER", "SCISSORS", "TRAP", "FLAG", "EMPTY", ""]  # noqa: E501
        if items not in allowed_values:
            raise ValueError(
                "Invalid value for `items` ({0}), must be one of {1}"
                .format(items, allowed_values)
            )

        self._items = items

    @property
    def player(self) -> str:
        """Gets the player of this Pawn.


        :return: The player of this Pawn.
        :rtype: str
        """
        return self._player

    @player.setter
    def player(self, player: str):
        """Sets the player of this Pawn.


        :param player: The player of this Pawn.
        :type player: str
        """
        allowed_values = ["HOST", "GUEST"]  # noqa: E501
        if player not in allowed_values:
            raise ValueError(
                "Invalid value for `player` ({0}), must be one of {1}"
                .format(player, allowed_values)
            )

        self._player = player
