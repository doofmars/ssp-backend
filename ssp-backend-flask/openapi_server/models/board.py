from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.pawn import Pawn
from openapi_server import util

from openapi_server.models.pawn import Pawn  # noqa: E501

class Board(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, width=None, height=None, grid=None):  # noqa: E501
        """Board - a model defined in OpenAPI

        :param width: The width of this Board.  # noqa: E501
        :type width: int
        :param height: The height of this Board.  # noqa: E501
        :type height: int
        :param grid: The grid of this Board.  # noqa: E501
        :type grid: List[List[Pawn]]
        """
        self.openapi_types = {
            'width': int,
            'height': int,
            'grid': List[List[Pawn]]
        }

        self.attribute_map = {
            'width': 'width',
            'height': 'height',
            'grid': 'grid'
        }

        self._width = width
        self._height = height
        self._grid = grid

    @classmethod
    def from_dict(cls, dikt) -> 'Board':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Board of this Board.  # noqa: E501
        :rtype: Board
        """
        return util.deserialize_model(dikt, cls)

    @property
    def width(self) -> int:
        """Gets the width of this Board.


        :return: The width of this Board.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width: int):
        """Sets the width of this Board.


        :param width: The width of this Board.
        :type width: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")  # noqa: E501

        self._width = width

    @property
    def height(self) -> int:
        """Gets the height of this Board.


        :return: The height of this Board.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height: int):
        """Sets the height of this Board.


        :param height: The height of this Board.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def grid(self) -> List[List[Pawn]]:
        """Gets the grid of this Board.


        :return: The grid of this Board.
        :rtype: List[List[Pawn]]
        """
        return self._grid

    @grid.setter
    def grid(self, grid: List[List[Pawn]]):
        """Sets the grid of this Board.


        :param grid: The grid of this Board.
        :type grid: List[List[Pawn]]
        """
        if grid is None:
            raise ValueError("Invalid value for `grid`, must not be `None`")  # noqa: E501

        self._grid = grid
