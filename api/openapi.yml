openapi: 3.0.0
info:
  title: SSP-Online Backend
  description: |-
    This is a the backend for the SSP Online Game. It is a RESTful API that is used by the frontend to play the game.

    Some useful links:
    - [ssp-online](https://github.com/doofmars/ssp-online) - The source code for the SSP Online Game
    - [ssp-backend](https://github.com/doofmars/ssp-backend) - The source code for the SSP Backend
  license:
    name: MIT
    url: https://github.com/doofmars/ssp-backend/blob/master/LICENSE.md
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: lobby
    description: Lobby related code for finding and joining a game
  - name: game
    description: Game related endpoint
paths:
  /game:
    put:
      tags:
        - lobby
      description: Create a new game
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGame'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Invalid ID supplied
        '404':
          description: Game not found
        '405':
          description: Invalid input
  /game/{gameId}:
    get:
      tags:
        - lobby
      description: Get information about a game
      parameters:
        - name: gameId
          in: path
          description: ID of game to return
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Invalid ID supplied
        '404':
          description: Game not found
  /game/{gameId}/turn:
    post:
      tags:
        - game
      description: Do a turn
      parameters:
        - name: gameId
          in: path
          description: ID of game to return
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - player
                - pawn
                - x
                - y
              properties:
                player:
                  $ref: '#/components/schemas/Player'
                pawn:
                  $ref: '#/components/schemas/Pawn'
                x:
                  type: integer
                  format: int64
                y:
                  type: integer
                  format: int64
                action:
                    type: string
                    enum:
                        - MOVE_X-1
                        - MOVE_X+1
                        - MOVE_Y-1
                        - MOVE_Y+1
                        - PLACE_TRAP
                        - PLACE_FLAG
                        - SHUFFLE_PAWNS
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Invalid ID supplied
        '404':
          description: Game not found
        '405':
          description: Invalid input
  /games:
    get:
      tags:
        - lobby
      description: Get all games
      parameters:
        - name: status
          in: query
          description: Status of the game
          required: false
          schema:
            $ref: '#/components/schemas/GameStatus'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        '400':
          description: Invalid ID supplied
        '404':
          description: Game not found
        '405':
          description: Invalid input
components:
  schemas:
    Id:
      type: string
      format: int64
    GameStatus:
      type: string
      enum:
        - WAITING_FOR_GUEST
        - SETUP_PLACE_FLAG
        - SETUP_PLACE_TRAP
        - SETUP_SHUFFLE_PAWNS
        - RUNNING_PLAYER_TURN
        - RUNNING_OPPONENT_TURN
        - RUNNING_FIGHT
        - RUNNING_SAME_WEAPON
        - FINISHED_HOST_WIN
        - FINISHED_GUEST_WIN
        - FINISHED_DRAW
    CreateGame:
      type: object
      required:
        - host
      properties:
        host:
          $ref: '#/components/schemas/Player'
    Game:
      type: object
      required:
        - id
        - host
        - guest
        - rounds
        - currentRound
        - winner
      properties:
        id:
          $ref: '#/components/schemas/Id'
        host:
          $ref: '#/components/schemas/Player'
        guest:
          $ref: '#/components/schemas/Player'
        board:
          $ref: '#/components/schemas/Board'
        status:
          $ref: '#/components/schemas/GameStatus'
        currentRound:
          type: integer
          format: int64
        last_update:
          type: string
          format: date-time
        winner:
          type: string
          enum:
            - NONE
            - HOST
            - GUEST
            - DRAW
    Player:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        key:
          description: Identify the player against the server
          type: string
    Board:
      type: object
      required:
        - width
        - height
        - grid
      properties:
        width:
          type: integer
          format: int64
        height:
          type: integer
          format: int64
        grid:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/Pawn'
    Pawn:
      type: object
      required:
          - item
          - owner
      properties:
        item:
          type: string
          enum:
            - ROCK
            - PAPER
            - SCISSORS
            - TRAP
            - FLAG
            - EMPTY
        owner:
          type: string
          enum:
            - HOST
            - GUEST