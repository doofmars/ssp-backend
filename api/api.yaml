openapi: 3.0.0
info:
  title: SSP-Online Backend
  description: |-
    This is a the backend for the SSP Online Game. It is a RESTful API that is used by the frontend to play the game.

    Some useful links:
    - [ssp-online](https://github.com/doofmars/ssp-online) - The source code for the SSP Online Game
    - [ssp-backend](https://github.com/doofmars/ssp-backend) - The source code for the SSP Backend

  license:
    name: MIT
    url: https://github.com/doofmars/ssp-backend/blob/master/LICENSE.md
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: lobby
    description: Lobby related code for finding and joining a game
  - name: game
    description: Game related endpoint
paths:
  /game:
    put:
      tags:
        - lobby
      description: Create a new game
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
            application/xml:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Invalid ID supplied
        '404':
          description: Game not found
        '405':
          description: Invalid input
  /game/{gameId}:
    get:
      tags:
        - lobby
      description: Get information about a game
      parameters:
        - name: gameId
          in: path
          description: ID of game to return
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Invalid ID supplied
        '404':
          description: Game not found
  /games:
    get:
      tags:
        - lobby
      description: Get all games
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        '400':
          description: Invalid ID supplied
        '404':
          description: Game not found
        '405':
          description: Invalid input
components:
  schemas:
    Id:
      type: string
      format: int64
    CreateGame:
      type: object
      required:
        - players
        - rounds
        - currentRound
        - winner
      properties:
        id:
          $ref: '#/components/schemas/Id'
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        rounds:
          type: array
          items:
            $ref: '#/components/schemas/Round'
        currentRound:
          type: integer
          format: int64
        winner:
          type: string
          enum:
            - PLAYER_ONE
            - PLAYER_TWO
            - DRAW
    Game:
      type: object
      required:
        - id
        - players
        - rounds
        - currentRound
        - winner
      properties:
        id:
          $ref: '#/components/schemas/Id'
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        rounds:
          type: array
          items:
            $ref: '#/components/schemas/Round'
        currentRound:
          type: integer
          format: int64
        winner:
          type: string
          enum:
            - PLAYER_ONE
            - PLAYER_TWO
            - DRAW
    Player:
      type: object
      required:
        - id
        - name
        - choice
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        choice:
          type: string
          enum:
            - ROCK
            - PAPER
            - SCISSORS
    Round:
      type: object
      required:
        - id
        - playerOne
        - playerTwo
        - winner
      properties:
        id:
          type: integer
          format: int64
        playerOne:
          type: string
          enum:
            - ROCK
            - PAPER
            - SCISSORS
        playerTwo:
          type: string
          enum:
            - ROCK
            - PAPER
            - SCISSORS
        winner:
          type: string
          enum:
            - PLAYER_ONE
            - PLAYER_TWO
            - DRAW